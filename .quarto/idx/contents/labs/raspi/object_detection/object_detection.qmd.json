{"title":"Object Detection","markdown":{"headingText":"Object Detection","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n![*DALL·E prompt - A cover image for an 'Object Detection' chapter in a Raspberry Pi tutorial, designed in the same vintage 1950s electronics lab style as previous covers. The scene should prominently feature wheels and cubes, similar to those provided by the user, placed on a workbench in the foreground. A Raspberry Pi with a connected camera module should be capturing an image of these objects. Surround the scene with classic lab tools like soldering irons, resistors, and wires. The lab background should include vintage equipment like oscilloscopes and tube radios, maintaining the detailed and nostalgic feel of the era. No text or logos should be included.*](images/jpeg/cover.jpg)\n\n## Overview\n\nBuilding upon our exploration of image classification, we now turn our attention to a more advanced computer vision task: object detection. While image classification assigns a single label to an entire image, object detection goes further by identifying and locating multiple objects within a single image. This capability opens up many new applications and challenges, particularly in edge computing and IoT devices like the Raspberry Pi.\n\nObject detection combines the tasks of classification and localization. It not only determines what objects are present in an image but also pinpoints their locations by, for example, drawing bounding boxes around them. This added complexity makes object detection a more powerful tool for understanding visual scenes, but it also requires more sophisticated models and training techniques.\n\nIn edge AI, where we work with constrained computational resources, implementing efficient object detection models becomes crucial. The challenges we faced with image classification—balancing model size, inference speed, and accuracy—are amplified in object detection. However, the rewards are also more significant, as object detection enables more nuanced and detailed visual data analysis.\n\nSome applications of object detection on edge devices include:\n\n1. Surveillance and security systems\n2. Autonomous vehicles and drones\n3. Industrial quality control\n4. Wildlife monitoring\n5. Augmented reality applications\n\nAs we put our hands into object detection, we'll build upon the concepts and techniques we explored in image classification. We'll examine popular object detection architectures designed for efficiency, such as:\n\n- Single Stage Detectors, such as MobileNet and EfficientDet, \n- FOMO (Faster Objects, More Objects), and \n- YOLO (You Only Look Once).\n\n> To learn more about object detection models, follow the tutorial [A Gentle Introduction to Object Recognition With Deep Learning](https://machinelearningmastery.com/object-recognition-with-deep-learning/).\n\nWe will explore those object detection models using \n\n- TensorFlow Lite Runtime (now changed to [LiteRT](https://ai.google.dev/edge/litert)), \n- Edge Impulse Linux Python SDK and\n- Ultralitics\n\n![](images/png/block.png)\n\nThroughout this lab, we’ll cover the fundamentals of object detection and how it differs from image classification. We'll also learn how to train, fine-tune, test, optimize, and deploy popular object detection architectures using a dataset created from scratch.\n\n### Object Detection Fundamentals\n\nObject detection builds upon the foundations of image classification but extends its capabilities significantly. To understand object detection, it's crucial first to recognize its key differences from image classification:\n\n#### Image Classification vs. Object Detection\n\n**Image Classification:**\n\n- Assigns a single label to an entire image\n- Answers the question: “What is this image's primary object or scene?”\n- Outputs a single class prediction for the whole image\n\n**Object Detection:**\n\n- Identifies and locates multiple objects within an image\n- Answers the questions: \"What objects are in this image, and where are they located?\"\n- Outputs multiple predictions, each consisting of a class label and a bounding box\n\nTo visualize this difference, let's consider an example: ![](images/jpeg/objxclas.jpg)\n\nThis diagram illustrates the critical difference: image classification provides a single label for the entire image, while object detection identifies multiple objects, their classes, and their locations within the image.\n\n#### Key Components of Object Detection\n\nObject detection systems typically consist of two main components:\n\n1. Object Localization: This component identifies where objects are located in the image. It typically outputs bounding boxes, rectangular regions encompassing each detected object.\n\n2. Object Classification: This component determines the class or category of each detected object, similar to image classification but applied to each localized region.\n\n#### Challenges in Object Detection\n\nObject detection presents several challenges beyond those of image classification:\n\n- Multiple objects: An image may contain multiple objects of various classes, sizes, and positions.\n- Varying scales: Objects can appear at different sizes within the image.\n- Occlusion: Objects may be partially hidden or overlapping.\n- Background clutter: Distinguishing objects from complex backgrounds can be challenging.\n- Real-time performance: Many applications require fast inference times, especially on edge devices.\n\n#### Approaches to Object Detection\n\nThere are two main approaches to object detection:\n\n1. Two-stage detectors: These first propose regions of interest and then classify each region. Examples include R-CNN and its variants (Fast R-CNN, Faster R-CNN).\n\n2. Single-stage detectors: These predict bounding boxes (or centroids) and class probabilities in one forward pass of the network. Examples include YOLO (You Only Look Once), EfficientDet, SSD (Single Shot Detector), and FOMO (Faster Objects, More Objects). These are often faster and more suitable for edge devices like Raspberry Pi.\n\n#### Evaluation Metrics\n\nObject detection uses different metrics compared to image classification:\n\n- **Intersection over Union (IoU)**: Measures the overlap between predicted and ground truth bounding boxes.\n- **Mean Average Precision (mAP)**: Combines precision and recall across all classes and IoU thresholds.\n- **Frames Per Second (FPS)**: Measures detection speed, crucial for real-time applications on edge devices.\n\n## Pre-Trained Object Detection Models Overview\n\nAs we saw in the introduction, given an image or a video stream, an object detection model can identify which of a known set of objects might be present and provide information about their positions within the image. \n\n> You can test some common models online by visiting [Object Detection - MediaPipe Studio](https://mediapipe-studio.webapps.google.com/studio/demo/object_detector)\n\nOn [Kaggle](https://www.kaggle.com/models?id=298,130,299), we can find the most common pre-trained tflite models to use with the Raspi, [ssd_mobilenet_v1,](https://www.kaggle.com/models/tensorflow/ssd-mobilenet-v1/tfLite) and [EfficientDet](https://www.kaggle.com/models/tensorflow/efficientdet/tfLite). Those models were trained on the COCO (Common Objects in Context) dataset, with over 200,000 labeled images in 91 categories. Go, download the models, and upload them to the `./models` folder in the Raspi. \n\n> Alternatively[,](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/tree/main/OBJ_DETEC/models) you can find the models and the COCO labels on [GitHub](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/tree/main/OBJ_DETEC/models).\n\nFor the first part of this lab, we will focus on a pre-trained 300x300 SSD-Mobilenet V1 model and compare it with the 320x320 EfficientDet-lite0, also trained using the COCO 2017 dataset. Both models were converted to a TensorFlow Lite format (4.2MB for the SSD Mobilenet and 4.6MB for the EfficientDet).\n\n> SSD-Mobilenet V2 or V3 is recommended for transfer learning projects, but once the V1 TFLite model is publicly available, we will use it for this overview.\n\n![](images/png/model-deploy.png)\n\n### Setting Up the TFLite Environment\n\nWe should confirm the steps done on the last Hands-On Lab, Image Classification, as follows: \n\n- Updating the Raspberry Pi\n\n- Installing Required Libraries\n\n- Setting up a Virtual Environment (Optional but Recommended)\n\n```bash\nsource ~/tflite/bin/activate\n```\n\n- Installing TensorFlow Lite Runtime\n\n- Installing Additional Python Libraries (inside the environment)\n\n### Creating a Working Directory:\n\nConsidering that we have created the `Documents/TFLITE` folder in the last Lab, let's now create the specific folders for this object detection lab:  \n\n```bash\ncd Documents/TFLITE/\nmkdir OBJ_DETECT\ncd OBJ_DETECT\nmkdir images\nmkdir models\ncd models\n```\n\n### Inference and Post-Processing\n\nLet's start a new  [notebook](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/SSD_MobileNetV1.ipynb) to follow all the steps to detect objects on an image:\n\nImport the needed libraries:\n\n```python\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport tflite_runtime.interpreter as tflite\n```\n\nLoad the TFLite model and allocate tensors:\n\n```python\nmodel_path = \"./models/ssd-mobilenet-v1-tflite-default-v1.tflite\"\ninterpreter = tflite.Interpreter(model_path=model_path)\ninterpreter.allocate_tensors()\n```\n\nGet input and output tensors.\n\n```python\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n```\n\n**Input details** will inform us how the model should be fed with an image. The shape of `(1, 300, 300, 3)` with a dtype of `uint8` tells us that a non-normalized (pixel value range from 0 to 255) image with dimensions (300x300x3) should be input one by one (Batch Dimension: 1). \n\nThe **output details** include not only the labels (\"classes\") and probabilities (“scores”) but also the relative window position of the bounding boxes (\"boxes”) about where the object is located on the image and the number of detected objects (\"num_detections\"). The output details also tell us that the model can detect a **maximum of 10 objects** in the image.\n\n![](images/png/inference result.png)\n\nSo, for the above example, using the same cat image used with the *Image Classification Lab* looking for the output, we have a **76% probability** of having found an object with a **class ID of 16** on an area delimited by a **bounding box of [0.028011084, 0.020121813, 0.9886069, 0.802299]**. Those four numbers are related to `ymin`, `xmin`, `ymax` and `xmax`, the box coordinates. \n\nTaking into consideration that **y** goes from the top `(ymin`) to the bottom (`ymax`) and **x** goes from left (`xmin`) to the right (`xmax`),  we have, in fact, the coordinates of the top/left corner and the bottom/right one. With both edges and knowing the shape of the picture, it is possible to draw a rectangle around the object, as shown in the figure below:\n\n![](images/png/boulding-boxes.png)\n\nNext, we should find what class ID equal to 16 means. Opening the file `coco_labels.txt`, as a list, each element has an associated index, and inspecting index 16, we get, as expected, `cat`. The probability is the value returning from the score.\n\nLet's now upload some images with multiple objects on it for testing. \n\n```python\nimg_path = \"./images/cat_dog.jpeg\"\norig_img = Image.open(img_path)\n\n# Display the image\nplt.figure(figsize=(8, 8))\nplt.imshow(orig_img)\nplt.title(\"Original Image\")\nplt.show()\n```\n\n![](images/png/cat-dog.png)\n\nBased on the input details, let's pre-process the image, changing its shape and expanding its dimension:\n\n```python\nimg = orig_img.resize((input_details[0]['shape'][1], \n                  input_details[0]['shape'][2]))\ninput_data = np.expand_dims(img, axis=0)\ninput_data.shape, input_data.dtype \n```\n\nThe new input_data shape is` (1, 300, 300, 3)` with a dtype of `uint8`, which is compatible with what the model expects. \n\nUsing the input_data, let's run the interpreter, measure the latency, and get the output:\n\n```python\nstart_time = time.time()\ninterpreter.set_tensor(input_details[0]['index'], input_data)\ninterpreter.invoke()\nend_time = time.time()\ninference_time = (end_time - start_time) * 1000  # Convert to milliseconds\nprint (\"Inference time: {:.1f}ms\".format(inference_time))\n```\n\nWith a latency of around 800ms, we can get 4 distinct outputs:\n\n```python\nboxes = interpreter.get_tensor(output_details[0]['index'])[0] \nclasses = interpreter.get_tensor(output_details[1]['index'])[0]  \nscores = interpreter.get_tensor(output_details[2]['index'])[0]   \nnum_detections = int(interpreter.get_tensor(output_details[3]['index'])[0])\n```\n\nOn a quick inspection, we can see that the model detected 2 objects with a score over 0.5:\n\n```python\nfor i in range(num_detections):\n    if scores[i] > 0.5:  # Confidence threshold\n        print(f\"Object {i}:\")\n        print(f\"  Bounding Box: {boxes[i]}\")\n        print(f\"  Confidence: {scores[i]}\")\n        print(f\"  Class: {classes[i]}\")\n```\n\n![](images/png/infer-mobv1.png)\n\nAnd we can also visualize the results:\n\n```python\nplt.figure(figsize=(12, 8))\nplt.imshow(orig_img)\nfor i in range(num_detections):\n    if scores[i] > 0.5:  # Adjust threshold as needed\n        ymin, xmin, ymax, xmax = boxes[i]\n        (left, right, top, bottom) = (xmin * orig_img.width, \n                                      xmax * orig_img.width, \n                                      ymin * orig_img.height, \n                                      ymax * orig_img.height)\n        rect = plt.Rectangle((left, top), right-left, bottom-top, \n                             fill=False, color='red', linewidth=2)\n        plt.gca().add_patch(rect)\n        class_id = int(classes[i])\n        class_name = labels[class_id]\n        plt.text(left, top-10, f'{class_name}: {scores[i]:.2f}', \n                 color='red', fontsize=12, backgroundcolor='white')\n```\n\n\n\n![](images/png/visual_inf.png)\n\n### EfficientDet\n\nEfficientDet is not technically an SSD (Single Shot Detector) model, but it shares some similarities and builds upon ideas from SSD and other object detection architectures:\n\n1. EfficientDet:\n    - Developed by Google researchers in 2019\n    - Uses EfficientNet as the backbone network\n    - Employs a novel bi-directional feature pyramid network (BiFPN)\n    - It uses compound scaling to scale the backbone network and the object detection components efficiently.\n\n2. Similarities to SSD:\n    - Both are single-stage detectors, meaning they perform object localization and classification in a single forward pass.\n    - Both use multi-scale feature maps to detect objects at different scales.\n\n3. Key differences:\n    - Backbone: SSD typically uses VGG or MobileNet, while EfficientDet uses EfficientNet.\n    - Feature fusion: SSD uses a simple feature pyramid, while EfficientDet uses the more advanced BiFPN.\n    - Scaling method: EfficientDet introduces compound scaling for all components of the network\n\n4. Advantages of EfficientDet:\n    - Generally achieves better accuracy-efficiency trade-offs than SSD and many other object detection models.\n    - More flexible scaling allows for a family of models with different size-performance trade-offs.\n\nWhile EfficientDet is not an SSD model, it can be seen as an evolution of single-stage detection architectures, incorporating more advanced techniques to improve efficiency and accuracy. When using EfficientDet, we can expect similar output structures to SSD (e.g., bounding boxes and class scores). \n\n> On GitHub, you can find another [notebook](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/SSD_EfficientDet.ipynb) exploring the EfficientDet model that we did with SSD MobileNet. \n>\n\n## Object Detection Project\n\nNow, we will develop a complete Image Classification project from data collection to training and deployment. As we did with the Image Classification project, the trained and converted model will be used for inference. \n\nWe will use the same dataset to train 3 models: SSD-MobileNet V2, FOMO, and YOLO. \n\n### The Goal\n\nAll Machine Learning projects need to start with a goal. Let's assume we are in an industrial facility and must sort and count **wheels** and special **boxes**.\n\n![](images/jpeg/proj_goal.jpg)\n\nIn other words, we should perform a multi-label classification, where each image can have three classes:\n\n- Background (no objects)\n\n- Box\n\n- Wheel\n\n### Raw Data Collection\n\nOnce we have defined our Machine Learning project goal, the next and most crucial step is collecting the dataset. We can use a phone, the Raspi, or a mix to create the raw dataset (with no labels). Let's use the simple web app on our Raspberry Pi to view the `QVGA (320 x 240)` captured images in a browser. \n\nFrom GitHub, get the Python script [get_img_data.py](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/IMG_CLASS/python_scripts/get_img_data.py) and open it in the terminal:\n\n```bash\npython3 get_img_data.py \n```\n\nAccess the web interface:\n\n- On the Raspberry Pi itself (if you have a GUI): Open a web browser and go to `http://localhost:5000`\n- From another device on the same network: Open a web browser and go to `http://<raspberry_pi_ip>:5000` (Replace `<raspberry_pi_ip>` with your Raspberry Pi's IP address). For example: `http://192.168.4.210:5000/`\n\n![](images/png/app.png)The Python script creates a web-based interface for capturing and organizing image datasets using a Raspberry Pi and its camera. It's handy for machine learning projects that require labeled image data or not, as in our case here.\n\nAccess the web interface from a browser, enter a generic label for the images you want to capture, and press `Start Capture`.\n\n![](images/png/cap-img.png)\n\n> Note that the images to be captured will have multiple labels that should be defined later. \n\nUse the live preview to position the camera and click `Capture Image` to save images under the current label (in this case, `box-wheel`.\n\n![](images/png/img_cap-1.png)\n\nWhen we have enough images, we can press `Stop Capture`. The captured images are saved on the folder dataset/box-wheel:\n\n![](images/png/dataset.png)\n\n> Get around 60 images. Try to capture different angles, backgrounds, and light conditions. Filezilla can transfer the created raw dataset to your main computer. \n\n### Labeling Data\n\nThe next step in an Object Detect project is to create a labeled dataset. We should label the raw dataset images, creating bounding boxes around each picture's objects (box and wheel). We can use labeling tools like [LabelImg,](https://pypi.org/project/labelImg/) [CVAT,](https://www.cvat.ai/) [Roboflow,](https://roboflow.com/annotate) or even the [Edge Impulse Studio.](https://edgeimpulse.com/) Once we have explored the Edge Impulse tool in other labs, let’s use Roboflow here.\n\n> We are using Roboflow (free version) here for two main reasons. 1) We can have auto-labeler, and 2) The annotated dataset is available in several formats and can be used both on Edge Impulse Studio (we will use it for MobileNet V2 and FOMO train) and on CoLab (YOLOv8 train), for example. Having the annotated dataset on Edge Impulse (Free account), it is not possible to use it for training on other platforms.\n\nWe should upload the raw dataset to [Roboflow.](https://roboflow.com/) Create a free account there and start a new project, for example, (“box-versus-wheel”).\n\n![](images/png/create-project-rf.png)\n\n> We will not enter in deep details about the Roboflow process once many tutorials are available. \n\n#### Annotate\n\nOnce the project is created and the dataset is uploaded, you should make the annotations using the \"Auto-Label\" Tool. Note that you can also upload images with only a background, which should be saved w/o any annotations. \n\n![](images/png/annotation.png)\n\nOnce all images are annotated, you should split them into training, validation, and testing. \n\n![](images/png/dataset_rf.png)\n\n#### Data Pre-Processing\n\nThe last step with the dataset is preprocessing to generate a final version for training. Let's resize all images to 320x320 and generate augmented versions of each image (augmentation) to create new training examples from which our model can learn. \n\nFor augmentation, we will rotate the images (+/-15^o^), crop, and vary the brightness and exposure.\n\n![](images/png/pre-proc.png)\n\nAt the end of the process, we will have 153 images. \n\n![](images/png/final-dataset.png)\n\nNow, you should export the annotated dataset in a format that Edge Impulse, Ultralitics, and other frameworks/tools understand, for example, `YOLOv8`. Let's download a zipped version of the dataset to our desktop.\n\n![](images/png/download-dataset.png)\n\nHere, it is possible to review how the dataset was structured\n\n![](images/png/dataset-struct.png)\n\nThere are 3 separate folders, one for each split (`train`/`test`/`valid`). For each of them, there are 2 subfolders, `images`, and `labels`. The pictures are stored as **image_id.jpg** and **images_id.txt**, where \"image_id\" is unique for every picture. \n\nThe labels file format will be `class_id` `bounding box coordinates`, where in our case, class_id will be `0` for `box` and `1` for `wheel`. The numerical id (o, 1, 2...) will follow the alphabetical order of the class name. \n\nThe `data.yaml` file has info about the dataset as the classes' names (`names: ['box', 'wheel']`) following the YOLO format. \n\nAnd that's it! We are ready to start training using the Edge Impulse Studio (as we will do in the following step), Ultralytics (as we will when discussing YOLO), or even training from scratch on CoLab (as we did with the Cifar-10 dataset on the Image Classification lab).\n\n> The pre-processed dataset can be found at the [Roboflow site](https://universe.roboflow.com/marcelo-rovai-riila/box-versus-wheel-auto-dataset), or here: <a href=\"https://universe.roboflow.com/marcelo-rovai-riila/box-versus-wheel-auto-dataset\">\n>     <img src=\"https://app.roboflow.com/images/download-dataset-badge.svg\"></img>\n> </a>\n\n## Training an SSD MobileNet Model on Edge Impulse Studio\n\nGo to [Edge Impulse Studio,](https://www.edgeimpulse.com/) enter your credentials at **Login** (or create an account), and start a new project.\n\n> Here, you can clone the project developed for this hands-on lab: [Raspi - Object Detection](https://studio.edgeimpulse.com/public/515477/live).\n\nOn the Project `Dashboard` tab, go down and on **Project info,** and for Labeling method select `Bounding boxes (object detection)` \n\n### Uploading the annotated data\n\nOn Studio, go to the `Data acquisition` tab, and on the `UPLOAD DATA` section, upload from your computer the raw dataset.\n\nWe can use the option `Select a folder`, choosing, for example, the folder `train` in your computer, which contains two sub-folders, `images`, and `labels`. Select the `Image label format`, \"YOLO TXT\", upload into the caegory `Training`, and press `Upload data`. \n\n![](images/png/upload-data.png)\n\nRepeat the process for the test data (upload both folders, test, and validation). At the end of the upload process, you should end with the annotated dataset of 153 images split in the train/test (84%/16%).\n\n> Note that labels will be stored at the labels files `0` and `1` , which are equivalent to `box` and `wheel`. \n\n![](images/png/ei-dataset.png)\n\n### The Impulse Design\n\nThe first thing to define when we enter the `Create impulse` step is to describe the target device for deployment. A pop-up window will appear. We will select Raspberry 4, an intermediary device between the Raspi-Zero and the Raspi-5. \n\n> This choice will not interfere with the training; it will only give us an idea about the latency of the model on that specific target. \n\n![](images/png/target-device.png)\n\nIn this phase, you should define how to:\n\n- **Pre-processing** consists of resizing the individual images. In our case, the images were pre-processed on Roboflow, to `320x320` , so let's keep it.  The resize will not matter here because the images are already squared. If you upload a rectangular image, squash it (squared form, without cropping). Afterward, you could define if the images are converted from RGB to Grayscale or not. \n\n- **Design a Model,** in this case, \"Object Detection.\"\n\n![](images/png/impulse-design.png)\n\n### Preprocessing all dataset\n\nIn the section `Image`, select **Color depth** as `RGB`, and press  `Save parameters`.\n\n![](images/png/ei-image-pre.png)\n\nThe Studio moves automatically to the next section, `Generate features`, where all samples will be pre-processed, resulting in 480 objects: 207 boxes and 273 wheels.\n\n![](images/png/ei-features.png)\n\nThe feature explorer shows that all samples evidence a good separation after the feature generation.\n\n### Model Design, Training, and Test\n\nFor training, we should select a pre-trained model. Let's use the **MobileNetV2 SSD FPN-Lite (320x320 only)** . It is a pre-trained object detection model designed to locate up to 10 objects within an image, outputting a bounding box for each object detected. The model is around 3.7MB in size. It supports an RGB input at 320x320px. \n\nRegarding the training hyper-parameters, the model will be trained with:\n\n- Epochs: 25\n- Batch size: 32\n- Learning Rate: 0.15.\n\nFor validation during training, 20% of the dataset (*validation_dataset*) will be spared. \n\n![](images/png/ei-train-result.png)\n\nAs a result, the model ends with an overall precision score (based on COCO mAP) of 88.8%, higher than the result when using the test data (83.3%). \n\n### Deploying the model\n\nWe have two ways to deploy our model:\n\n- **TFLite model**, which lets deploy the trained model as `.tflite` for the Raspi to run it using Python.\n- **Linux (AARCH64)**, a binary for Linux (AARCH64), implements the Edge Impulse Linux protocol, which lets us run our models on any Linux-based development board, with SDKs for Python, for example. See the documentation for more information and [setup instructions](https://docs.edgeimpulse.com/docs/edge-impulse-for-linux).\n\nLet's deploy the **TFLite model**. On the `Dashboard` tab, go to Transfer learning model (int8 quantized) and click on the download icon:\n\n![](images/png/ei-deploy-int8.png)\n\nTransfer the model from your computer to the Raspi folder`./models` and capture or get some images for inference and save them in the folder `./images`.\n\n### Inference and Post-Processing\n\nThe inference can be made as discussed in the *Pre-Trained Object Detection Models Overview*. Let's start a new [notebook](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/EI-SSD-MobileNetV2.ipynb) to follow all the steps to detect cubes and wheels on an image.\n\nImport the needed libraries:\n\n```python\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom PIL import Image\nimport tflite_runtime.interpreter as tflite\n```\n\nDefine the model path and labels:\n\n```python\nmodel_path = \"./models/ei-raspi-object-detection-SSD-MobileNetv2-320x0320-\\\nint8.lite\"\nlabels = ['box', 'wheel']\n```\n\n> Remember that the model will output the class ID as values (0 and 1), following an alphabetic order regarding the class names.\n\nLoad the model, allocate the tensors, and get the input and output tensor details:\n\n```python\n# Load the TFLite model\ninterpreter = tflite.Interpreter(model_path=model_path)\ninterpreter.allocate_tensors()\n\n# Get input and output tensors\ninput_details = interpreter.get_input_details()\noutput_details = interpreter.get_output_details()\n```\n\nOne crucial difference to note is that the `dtype` of the input details of the model is now `int8`, which means that the input values go from -128 to +127, while each pixel of our raw image goes from 0 to 256. This means that we should pre-process the image to match it. We can check here:\n\n```python\ninput_dtype = input_details[0]['dtype']\ninput_dtype\n```\n\n```\nnumpy.int8\n```\n\nSo, let's open the image and show it:\n\n```python\n# Load the image\nimg_path = \"./images/box_2_wheel_2.jpg\"\norig_img = Image.open(img_path)\n\n# Display the image\nplt.figure(figsize=(6, 6))\nplt.imshow(orig_img)\nplt.title(\"Original Image\")\nplt.show()\n```\n\n![](images/png/orig-img.png)\n\nAnd perform the pre-processing:\n\n```python\nscale, zero_point = input_details[0]['quantization']\nimg = orig_img.resize((input_details[0]['shape'][1], \n                  input_details[0]['shape'][2]))\nimg_array = np.array(img, dtype=np.float32) / 255.0\nimg_array = (img_array / scale + zero_point).clip(-128, 127).astype(np.int8)\ninput_data = np.expand_dims(img_array, axis=0)\n```\n\nChecking the input data, we can verify that the input tensor is compatible with what is expected by the model:\n\n```python\ninput_data.shape, input_data.dtype\n```\n\n```\n((1, 320, 320, 3), dtype('int8'))\n```\n\nNow, it is time to perform the inference. Let's also calculate the latency of the model:\n\n```python\n# Inference on Raspi-Zero\nstart_time = time.time()\ninterpreter.set_tensor(input_details[0]['index'], input_data)\ninterpreter.invoke()\nend_time = time.time()\ninference_time = (end_time - start_time) * 1000  # Convert to milliseconds\nprint (\"Inference time: {:.1f}ms\".format(inference_time))\n```\n\nThe model will take around 600ms to perform the inference in the Raspi-Zero, which is around 5 times longer than a Raspi-5.\n\nNow, we can get the output classes of objects detected, its bounding boxes coordinates, and probabilities. \n\n```python\nboxes = interpreter.get_tensor(output_details[1]['index'])[0]  \nclasses = interpreter.get_tensor(output_details[3]['index'])[0]  \nscores = interpreter.get_tensor(output_details[0]['index'])[0]        \nnum_detections = int(interpreter.get_tensor(output_details[2]['index'])[0])\n```\n\n```python\nfor i in range(num_detections):\n    if scores[i] > 0.5:  # Confidence threshold\n        print(f\"Object {i}:\")\n        print(f\"  Bounding Box: {boxes[i]}\")\n        print(f\"  Confidence: {scores[i]}\")\n        print(f\"  Class: {classes[i]}\")\n```\n\n![](images/png/infer-text.png)\n\nFrom the results, we can see that 4 objects were detected: two with class ID 0 (`box`)and two with class ID 1 (`wheel`), what is correct!\n\nLet's visualize the result for a ` threshold`  of 0.5\n\n```python\nthreshold = 0.5\nplt.figure(figsize=(6,6))\nplt.imshow(orig_img)\nfor i in range(num_detections):\n    if scores[i] > threshold:  \n        ymin, xmin, ymax, xmax = boxes[i]\n        (left, right, top, bottom) = (xmin * orig_img.width, \n                                      xmax * orig_img.width, \n                                      ymin * orig_img.height, \n                                      ymax * orig_img.height)\n        rect = plt.Rectangle((left, top), right-left, bottom-top, \n                             fill=False, color='red', linewidth=2)\n        plt.gca().add_patch(rect)\n        class_id = int(classes[i])\n        class_name = labels[class_id]\n        plt.text(left, top-10, f'{class_name}: {scores[i]:.2f}', \n                 color='red', fontsize=12, backgroundcolor='white')\n```\n\n![](images/png/infer-visual.png)\n\nBut what happens if we reduce the threshold to 0.3, for example? \n\n![](images/png/infer-mult.png)\n\nWe start to see false positives and **multiple detections**, where the model detects the same object multiple times with different confidence levels and slightly different bounding boxes. \n\nCommonly, sometimes, we need to adjust the threshold to smaller values to capture all objects, avoiding false negatives, which would lead to multiple detections. \n\nTo improve the detection results, we should implement **Non-Maximum Suppression (NMS**), which helps eliminate overlapping bounding boxes and keeps only the most confident detection.\n\nFor that, let's create a general function named `non_max_suppression()`, with the role of refining object detection results by eliminating redundant and overlapping bounding boxes. It achieves this by iteratively selecting the detection with the highest confidence score and removing other significantly overlapping detections based on an Intersection over Union (IoU) threshold. \n\n```python\ndef non_max_suppression(boxes, scores, threshold):\n    # Convert to corner coordinates\n    x1 = boxes[:, 0]\n    y1 = boxes[:, 1]\n    x2 = boxes[:, 2]\n    y2 = boxes[:, 3]\n\n    areas = (x2 - x1 + 1) * (y2 - y1 + 1)\n    order = scores.argsort()[::-1]\n\n    keep = []\n    while order.size > 0:\n        i = order[0]\n        keep.append(i)\n        xx1 = np.maximum(x1[i], x1[order[1:]])\n        yy1 = np.maximum(y1[i], y1[order[1:]])\n        xx2 = np.minimum(x2[i], x2[order[1:]])\n        yy2 = np.minimum(y2[i], y2[order[1:]])\n\n        w = np.maximum(0.0, xx2 - xx1 + 1)\n        h = np.maximum(0.0, yy2 - yy1 + 1)\n        inter = w * h\n        ovr = inter / (areas[i] + areas[order[1:]] - inter)\n\n        inds = np.where(ovr <= threshold)[0]\n        order = order[inds + 1]\n\n    return keep\n```\n\nHow it works:\n\n1. Sorting: It starts by sorting all detections by their confidence scores, highest to lowest.\n\n2. Selection: It selects the highest-scoring box and adds it to the final list of detections.\n\n3. Comparison: This selected box is compared with all remaining lower-scoring boxes.\n\n4. Elimination: Any box that overlaps significantly (above the IoU threshold) with the selected box is eliminated.\n\n5. Iteration: This process repeats with the next highest-scoring box until all boxes are processed.\n\nNow, we can define a more precise visualization function that will take into consideration an IoU threshold, detecting only the objects that were selected by the `non_max_suppression` function:\n\n```python\ndef visualize_detections(image, boxes, classes, scores, \n                         labels, threshold, iou_threshold):\n    if isinstance(image, Image.Image):\n        image_np = np.array(image)\n    else:\n        image_np = image\n\n    height, width = image_np.shape[:2]\n    \n    # Convert normalized coordinates to pixel coordinates\n    boxes_pixel = boxes * np.array([height, width, height, width])\n    \n    # Apply NMS\n    keep = non_max_suppression(boxes_pixel, scores, iou_threshold)\n    \n    # Set the figure size to 12x8 inches\n    fig, ax = plt.subplots(1, figsize=(12, 8))\n\n    ax.imshow(image_np)\n    \n    for i in keep:\n        if scores[i] > threshold:\n            ymin, xmin, ymax, xmax = boxes[i]\n            rect = patches.Rectangle((xmin * width, ymin * height),\n                                     (xmax - xmin) * width,\n                                     (ymax - ymin) * height,\n                                     linewidth=2, edgecolor='r', facecolor='none')\n            ax.add_patch(rect)\n            class_name = labels[int(classes[i])]\n            ax.text(xmin * width, ymin * height - 10,\n                    f'{class_name}: {scores[i]:.2f}', color='red',\n                    fontsize=12, backgroundcolor='white')\n\n    plt.show()\n```\n\nNow we can create a function that will call the others, performing inference on any image:\n\n```python\ndef detect_objects(img_path, conf=0.5, iou=0.5):\n    orig_img = Image.open(img_path)\n    scale, zero_point = input_details[0]['quantization']\n    img = orig_img.resize((input_details[0]['shape'][1], \n                      input_details[0]['shape'][2]))\n    img_array = np.array(img, dtype=np.float32) / 255.0\n    img_array = (img_array / scale + zero_point).clip(-128, 127).\\\n    astype(np.int8)\n    input_data = np.expand_dims(img_array, axis=0)\n    \n    # Inference on Raspi-Zero\n    start_time = time.time()\n    interpreter.set_tensor(input_details[0]['index'], input_data)\n    interpreter.invoke()\n    end_time = time.time()\n    inference_time = (end_time - start_time) * 1000  # Convert to ms\n    print (\"Inference time: {:.1f}ms\".format(inference_time))\n    \n    # Extract the outputs\n    boxes = interpreter.get_tensor(output_details[1]['index'])[0]  \n    classes = interpreter.get_tensor(output_details[3]['index'])[0]  \n    scores = interpreter.get_tensor(output_details[0]['index'])[0]        \n    num_detections = int(interpreter.get_tensor(output_details[2]['index'])[0])\n\n    visualize_detections(orig_img, boxes, classes, scores, labels, \n                         threshold=conf, \n                         iou_threshold=iou)\n```\n\nNow, running the code, having the same image again with a confidence threshold of 0.3, but with a small IoU:\n\n```python\nimg_path = \"./images/box_2_wheel_2.jpg\"\ndetect_objects(img_path, conf=0.3,iou=0.05)\n```\n\n![](images/png/infer-iou.png)\n\n## Training a FOMO Model at Edge Impulse Studio\n\nThe inference with the SSD MobileNet model worked well, but the latency was significantly high. The inference varied from 0.5 to 1.3 seconds on a Raspi-Zero, which means around or less than 1 FPS (1 frame per second). One alternative to speed up the process is to use FOMO (Faster Objects, More Objects).\n\nThis novel machine learning algorithm lets us count multiple objects and find their location in an image in real-time using up to 30x less processing power and memory than MobileNet SSD or YOLO. The main reason this is possible is that while other models calculate the object’s size by drawing a square around it (bounding box), FOMO ignores the size of the image, providing only the information about where the object is located in the image through its centroid coordinates.\n\n### How FOMO works?\n\nIn a typical object detection pipeline, the first stage is extracting features from the input image. **FOMO leverages MobileNetV2 to perform this task**. MobileNetV2 processes the input image to produce a feature map that captures essential characteristics, such as textures, shapes, and object edges, in a computationally efficient way.\n\n![](images/png/fomo-1.png)\n\nOnce these features are extracted, FOMO’s simpler architecture, focused on center-point detection, interprets the feature map to determine where objects are located in the image. The output is a grid of cells, where each cell represents whether or not an object center is detected. The model outputs one or more confidence scores for each cell, indicating the likelihood of an object being present.\n\nLet's see how it works on an image. \n\nFOMO divides the image into blocks of pixels using a factor of 8. For the input of 96x96, the grid would be 12x12 (96/8=12). For a 160x160, the grid will be 20x20, and so on. Next, FOMO will run a classifier through each pixel block to calculate the probability that there is a box or a wheel in each of them and, subsequently, determine the regions that have the highest probability of containing the object (If a pixel block has no objects, it will be classified as *background*). From the overlap of the final region, the FOMO provides the coordinates (related to the image dimensions) of the centroid of this region.\n\n![](images/png/fomo-works.png)\n\n**Trade-off Between Speed and Precision**:\n\n- **Grid Resolution**: FOMO uses a grid of fixed resolution, meaning each cell can detect if an object is present in that part of the image. While it doesn’t provide high localization accuracy, it makes a trade-off by being fast and computationally light, which is crucial for edge devices.\n- **Multi-Object Detection**: Since each cell is independent, FOMO can detect multiple objects simultaneously in an image by identifying multiple centers.\n\n### Impulse Design, new Training and Testing\n\nReturn to Edge Impulse Studio, and in the `Experiments` tab, create another impulse. Now, the input images should be 160x160 (this is the expected input size for MobilenetV2).\n\n![](images/png/impulse-2.png) \n\nOn the `Image` tab, generate the features and go to the `Object detection`  tab.\n\nWe should select a pre-trained model for training. Let’s use the **FOMO (Faster Objects, More Objects) MobileNetV2 0.35.**\n\n![](images/png/model-choice.png)\n\nRegarding the training hyper-parameters, the model will be trained with:\n\n- Epochs: 30\n- Batch size: 32\n- Learning Rate: 0.001.\n\nFor validation during training, 20% of the dataset (*validation_dataset*) will be spared. We will not apply Data Augmentation for the remaining 80% (*train_dataset*) because our dataset was already augmented during the labeling phase at Roboflow. \n\nAs a result, the model ends with an overall F1 score of 93.3% with an impressive latency of 8ms (Raspi-4), around 60X less than we got with the SSD MovileNetV2.  \n\n![](images/png/fomo-train-result.png)\n\n> Note that FOMO automatically added a third label background to the two previously defined *boxes* (0) and *wheels* (1).\n\nOn the `Model testing` tab, we can see that the accuracy was 94%. Here is one of the test sample results:\n\n![](images/png/fomo-test.png)\n\n> In object detection tasks, accuracy is generally not the primary [evaluation metric.](https://learnopencv.com/mean-average-precision-map-object-detection-model-evaluation-metric/) Object detection involves classifying objects and providing bounding boxes around them, making it a more complex problem than simple classification. The issue is that we do not have the bounding box, only the centroids. In short, using accuracy as a metric could be misleading and may not provide a complete understanding of how well the model is performing. \n\n### Deploying the model\n\nAs we did in the previous section, we can deploy the trained model as TFLite or Linux (AARCH64). Let's do it now as **Linux (AARCH64)**, a binary that implements the [Edge Impulse Linux](https://docs.edgeimpulse.com/docs/tools/edge-impulse-for-linux) protocol. \n\nEdge Impulse for Linux models is delivered in `.eim` format. This [executable](https://docs.edgeimpulse.com/docs/run-inference/linux-eim-executable) contains our \"full impulse\" created in Edge Impulse Studio. The impulse consists of the signal processing block(s) and any learning and anomaly block(s) we added and trained. It is compiled with optimizations for our processor or GPU (e.g., NEON instructions on ARM cores), plus a straightforward IPC layer (over a Unix socket). \n\nAt the `Deploy` tab, select the option `Linux (AARCH64)`, the `int8`model and press `Build`. \n\n![](images/png/deploy-linux.png)\n\nThe model will be automatically downloaded to your computer. \n\nOn our Raspi, let's create a new working area:\n\n```bash\ncd ~\ncd Documents\nmkdir EI_Linux\ncd EI_Linux\nmkdir models\nmkdir images\n```\n\nRename the model for easy identification:\n\nFor example, `raspi-object-detection-linux-aarch64-FOMO-int8.eim` and transfer it to the new Raspi folder`./models` and capture or get some images for inference and save them in the folder `./images`.\n\n### Inference and Post-Processing\n\nThe inference will be made using the [Linux Python SDK](https://docs.edgeimpulse.com/docs/tools/edge-impulse-for-linux/linux-python-sdk). This library lets us run machine learning models and collect sensor data on [Linux](https://docs.edgeimpulse.com/docs/tools/edge-impulse-for-linux) machines using Python. The SDK is open source and hosted on GitHub: [edgeimpulse/linux-sdk-python](https://github.com/edgeimpulse/linux-sdk-python). \n\nLet's set up a Virtual Environment for working with the Linux Python SDK\n\n```bash\npython3 -m venv ~/eilinux\nsource ~/eilinux/bin/activate\n```\n\nAnd Install the all the libraries needed:\n\n```bash\nsudo apt-get update\nsudo apt-get install libatlas-base-dev libportaudio0 libportaudio2\nsudo apt-get installlibportaudiocpp0 portaudio19-dev\n\npip3 install edge_impulse_linux -i https://pypi.python.org/simple\npip3 install Pillow matplotlib pyaudio opencv-contrib-python\n\nsudo apt-get install portaudio19-dev\npip3 install pyaudio \npip3 install opencv-contrib-python\n```\n\nPermit our model to be executable.\n\n```bash\nchmod +x raspi-object-detection-linux-aarch64-FOMO-int8.eim\n```\n\nInstall the Jupiter Notebook on the new environment \n\n```bash\npip3 install jupyter\n```\n\nRun a notebook locally (on the Raspi-4 or 5 with desktop)\n\n```bash\njupyter notebook\n```\n\nor on the browser on your computer:\n\n```bash\njupyter notebook --ip=192.168.4.210 --no-browser\n```\n\nLet's start a new [notebook](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/EI-Linux-FOMO.ipynb) by following all the steps to detect cubes and wheels on an image using the FOMO model and the Edge Impulse Linux Python SDK.\n\nImport the needed libraries:\n\n```python\nimport sys, time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom PIL import Image\nimport cv2\nfrom edge_impulse_linux.image import ImageImpulseRunner\n```\n\nDefine the model path and labels:\n\n```python\nmodel_file = \"raspi-object-detection-linux-aarch64-int8.eim\"\nmodel_path = \"models/\"+ model_file # Trained ML model from Edge Impulse\nlabels = ['box', 'wheel']\n```\n\n> Remember that the model will output the class ID as values (0 and 1), following an alphabetic order regarding the class names.\n\nLoad and initialize the model:\n\n```python\n# Load the model file\nrunner = ImageImpulseRunner(model_path)\n\n# Initialize model\nmodel_info = runner.init()\n```\n\nThe `model_info` will contain critical information about our model. However, unlike the TFLite interpreter, the EI Linux Python SDK library will now prepare the model for inference.\n\nSo, let's open the image and show it (Now, for compatibility, we will use OpenCV, the CV Library used internally by EI. OpenCV reads the image as BGR, so we will need to convert it to RGB :\n\n```python\n# Load the image\nimg_path = \"./images/1_box_1_wheel.jpg\"\norig_img = cv2.imread(img_path)\nimg_rgb = cv2.cvtColor(orig_img, cv2.COLOR_BGR2RGB)\n\n# Display the image\nplt.imshow(img_rgb)\nplt.title(\"Original Image\")\nplt.show()\n```\n\n![](images/png/orig-fomo-img.png)\n\nNow we will get the features and the preprocessed image (`cropped`) using the `runner`:\n\n```python\nfeatures, cropped = runner.get_features_from_image_auto_studio_setings(img_rgb)\n```\n\nAnd perform the inference. Let's also calculate the latency of the model:\n\n```python\nres = runner.classify(features)\n```\n\nLet's get the output classes of objects detected, their bounding boxes centroids, and probabilities. \n\n```python\nprint('Found %d bounding boxes (%d ms.)' % (\n  len(res[\"result\"][\"bounding_boxes\"]), \n  res['timing']['dsp'] + res['timing']['classification']))\nfor bb in res[\"result\"][\"bounding_boxes\"]:\n    print('\\t%s (%.2f): x=%d y=%d w=%d h=%d' % (\n      bb['label'], bb['value'], bb['x'], \n      bb['y'], bb['width'], bb['height']))\n```\n\n```\nFound 2 bounding boxes (29 ms.)\n\t1 (0.91): x=112 y=40 w=16 h=16\n\t0 (0.75): x=48 y=56 w=8 h=8\n```\n\nThe results show that two objects were detected: one with class ID 0 (`box`) and one with class ID 1 (`wheel`), which is correct!\n\nLet's visualize the result (The ` threshold` is 0.5, the default value set during the model testing on the Edge Impulse Studio).\n\n```python\nprint('\\tFound %d bounding boxes (latency: %d ms)' % (\n  len(res[\"result\"][\"bounding_boxes\"]), \n  res['timing']['dsp'] + res['timing']['classification']))\nplt.figure(figsize=(5,5))\nplt.imshow(cropped)\n\n# Go through each of the returned bounding boxes\nbboxes = res['result']['bounding_boxes']\nfor bbox in bboxes:\n\n    # Get the corners of the bounding box\n    left = bbox['x']\n    top = bbox['y']\n    width = bbox['width']\n    height = bbox['height']\n    \n    # Draw a circle centered on the detection\n    circ = plt.Circle((left+width//2, top+height//2), 5, \n                     fill=False, color='red', linewidth=3)\n    plt.gca().add_patch(circ)\n    class_id = int(bbox['label'])\n    class_name = labels[class_id]\n    plt.text(left, top-10, f'{class_name}: {bbox[\"value\"]:.2f}', \n              color='red', fontsize=12, backgroundcolor='white')\nplt.show()\n```\n\n![](images/png/infer-fomo-result.png)\n\n## Exploring a YOLO Model using Ultralitics\n\nFor this lab, we will explore YOLOv8. [Ultralytics](https://ultralytics.com/) [YOLOv8](https://github.com/ultralytics/ultralytics) is a version of the acclaimed real-time object detection and image segmentation model, YOLO. YOLOv8 is built on cutting-edge advancements in deep learning and computer vision, offering unparalleled performance in terms of speed and accuracy. Its streamlined design makes it suitable for various applications and easily adaptable to different hardware platforms, from edge devices to cloud APIs.\n\n### Talking about the YOLO Model\n\nThe YOLO (You Only Look Once) model is a highly efficient and widely used object detection algorithm known for its real-time processing capabilities. Unlike traditional object detection systems that repurpose classifiers or localizers to perform detection, YOLO frames the detection problem as a single regression task. This innovative approach enables YOLO to simultaneously predict multiple bounding boxes and their class probabilities from full images in one evaluation, significantly boosting its speed.\n\n#### Key Features:\n\n1. **Single Network Architecture**:\n\n    - YOLO employs a single neural network to process the entire image. This network divides the image into a grid and, for each grid cell, directly predicts bounding boxes and associated class probabilities. This end-to-end training improves speed and simplifies the model architecture.\n\n2. **Real-Time Processing**:\n\n    - One of YOLO’s standout features is its ability to perform object detection in real-time. Depending on the version and hardware, YOLO can process images at high frames per second (FPS). This makes it ideal for applications requiring quick and accurate object detection, such as video surveillance, autonomous driving, and live sports analysis.\n\n3. **Evolution of Versions**:\n\n    - Over the years, YOLO has undergone significant improvements, from YOLOv1 to the latest YOLOv10. Each iteration has introduced enhancements in accuracy, speed, and efficiency. YOLOv8, for instance, incorporates advancements in network architecture, improved training methodologies, and better support for various hardware, ensuring a more robust performance.\n    - Although YOLOv10 is the family's newest member with an encouraging performance based on its paper, it was just released (May 2024) and is not fully integrated with the Ultralitycs library. Conversely, the precision-recall curve analysis suggests that YOLOv8 generally outperforms YOLOv9, capturing a higher proportion of true positives while minimizing false positives more effectively (for more details, see this [article](https://encord.com/blog/performanceyolov9-vs-yolov8-custom-dataset/)). So, this lab is based on the YOLOv8n.\n\n    ![](images/jpeg/versions.jpg)\n\n4. **Accuracy and Efficiency**:\n\n    - While early versions of YOLO traded off some accuracy for speed, recent versions have made substantial strides in balancing both. The newer models are faster and more accurate, detecting small objects (such as bees) and performing well on complex datasets.\n\n5. **Wide Range of Applications**:\n\n    - YOLO’s versatility has led to its adoption in numerous fields. It is used in traffic monitoring systems to detect and count vehicles, security applications to identify potential threats and agricultural technology to monitor crops and livestock. Its application extends to any domain requiring efficient and accurate object detection.\n\n6. **Community and Development**:\n\n    - YOLO continues to evolve and is supported by a strong community of developers and researchers (being the YOLOv8 very strong). Open-source implementations and extensive documentation have made it accessible for customization and integration into various projects. Popular deep learning frameworks like Darknet, TensorFlow, and PyTorch support YOLO, further broadening its applicability.\n    - [Ultralitics YOLOv8](https://github.com/ultralytics/ultralytics?tab=readme-ov-file) can not only [Detect](https://docs.ultralytics.com/tasks/detect) (our case here) but also [Segment](https://docs.ultralytics.com/tasks/segment) and [Pose](https://docs.ultralytics.com/tasks/pose) models pre-trained on the [COCO](https://docs.ultralytics.com/datasets/detect/coco) dataset and YOLOv8 [Classify](https://docs.ultralytics.com/tasks/classify) models pre-trained on the [ImageNet](https://docs.ultralytics.com/datasets/classify/imagenet) dataset. [Track](https://docs.ultralytics.com/modes/track) mode is available for all Detect, Segment, and Pose models.\n\n    ![Ultralytics YOLO supported tasks](https://raw.githubusercontent.com/ultralytics/assets/main/im/banner-tasks.png)\n\n### Installation\n\nOn our Raspi, let's deactivate the current environment to create a new working area:\n\n```bash\ndeactivate\ncd ~\ncd Documents/\nmkdir YOLO\ncd YOLO\nmkdir models\nmkdir images\n```\n\nLet's set up a Virtual Environment for working with the Ultralytics YOLOv8\n\n```bash\npython3 -m venv ~/yolo\nsource ~/yolo/bin/activate\n```\n\nAnd install the Ultralytics packages for local inference on the Raspi\n\n1. Update the packages list, install pip, and upgrade to the latest:\n\n```bash\nsudo apt update\nsudo apt install python3-pip -y\npip install -U pip\n```\n\n2. Install the `ultralytics` pip package with optional dependencies:\n\n```bash\npip install ultralytics[export]\n```\n\n3. Reboot the device:\n\n```bash\nsudo reboot\n```\n\n### Testing the YOLO\n\nAfter the Raspi-Zero booting, let's activate the `yolo` env, go to the working directory,\n\n```bash\nsource ~/yolo/bin/activate\ncd /Documents/YOLO\n```\n\nand run inference on an image that will be downloaded from the Ultralytics website, using the YOLOV8n model (the smallest in the family) at the Terminal (CLI):\n\n```bash\nyolo predict model='yolov8n' source='https://ultralytics.com/images/bus.jpg'\n```\n\n> The YOLO model family is pre-trained with the COCO dataset. \n\nThe inference result will appear in the terminal. In the image (bus.jpg), 4 `persons`, 1 `bus,` and 1 `stop signal` were detected: \n\n![](images/png/yolo-infer-bus.png)\n\nAlso, we got a message that `Results saved to runs/detect/predict`. Inspecting that directory, we can see a new image saved (bus.jpg). Let's download it from the Raspi-Zero to our desktop for inspection: \n\n![](images/png/yolo-bus.png)\n\nSo, the Ultrayitics YOLO is correctly installed on our Raspi. But, on the Raspi-Zero, an issue is the high latency for this inference,  around 18 seconds, even with the most miniature model of the family (YOLOv8n). \n\n### Export Model to NCNN format\n\nDeploying computer vision models on edge devices with limited computational power, such as the Raspi-Zero, can cause latency issues. One alternative is to use a format optimized for optimal performance. This ensures that even devices with limited processing power can handle advanced computer vision tasks well.\n\nOf all the model export formats supported by Ultralytics, the [NCNN](https://docs.ultralytics.com/integrations/ncnn) is a high-performance neural network inference computing framework optimized for mobile platforms. From the beginning of the design, NCNN was deeply considerate about deployment and use on mobile phones and did not have third-party dependencies. It is cross-platform and runs faster than all known open-source frameworks (such as TFLite). \n\nNCNN delivers the best inference performance when working with Raspberry Pi devices. NCNN is highly optimized for mobile embedded platforms (such as ARM architecture). \n\nSo, let's convert our model and rerun the inference:\n\n1. Export a YOLOv8n PyTorch model to NCNN format, creating:  '/yolov8n_ncnn_model'\n\n```bash\nyolo export model=yolov8n.pt format=ncnn \n```\n\n2. Run inference with the exported model (now the source could be the bus.jpg image that was downloaded from the website to the current directory on the last inference):\n\n```bash\nyolo predict model='./yolov8n_ncnn_model' source='bus.jpg'\n```\n\n> The first inference, when the model is loaded, usually has a high latency (around 17s), but from the 2nd, it is possible to note that the inference goes down to around 2s. \n\n### Exploring YOLO with Python\n\nTo start, let's call the Python Interpreter so we can explore how the YOLO model works, line by line:\n\n```bash\npython3\n```\n\nNow, we should call the YOLO library from Ultralitics and load the model:\n\n```python\nfrom ultralytics import YOLO\nmodel = YOLO('yolov8n_ncnn_model')\n```\n\nNext, run inference over an image (let's use again `bus.jpg`):\n\n```python\nimg = 'bus.jpg'\nresult = model.predict(img, save=True, imgsz=640, conf=0.5, iou=0.3)\n```\n\n![](images/png/python-infer-bus.png)\n\nWe can verify that the result is almost identical to the one we get running the inference at the terminal level (CLI), except that the bus stop was not detected with the reduced NCNN model. Note that the latency was reduced. \n\nLet's analyze the \"result\" content.\n\nFor example, we can see `result[0].boxes.data`, showing us the main inference result, which is a tensor shape (4, 6). Each line is one of the objects detected, being the 4 first columns, the bounding boxes coordinates, the 5th, the confidence, and the 6th, the class (in this case, `0: person` and `5: bus`):\n\n![](images/png/result-bus.png)\n\nWe can access several inference results separately, as the inference time, and have it printed in a better format:\n\n```python\ninference_time = int(result[0].speed['inference'])\nprint(f\"Inference Time: {inference_time} ms\")\n```\n\nOr we can have the total number of objects detected:\n\n```python\nprint(f'Number of objects: {len (result[0].boxes.cls)}')\n```\n\n![](images/png/data-bus.png)\n\nWith Python, we can create a detailed output that meets our needs (See [Model Prediction with Ultralytics YOLO]( https://docs.ultralytics.com/modes/predict/) for more details). Let's run a Python script instead of manually entering it line by line in the interpreter, as shown below. Let's use `nano` as our text editor. First, we should create an empty Python script named, for example, `yolov8_tests.py`:\n\n```python\nnano yolov8_tests.py\n```\n\nEnter with the code lines:\n\n```python\nfrom ultralytics import YOLO\n\n# Load the YOLOv8 model\nmodel = YOLO('yolov8n_ncnn_model')\n\n# Run inference\nimg = 'bus.jpg'\nresult = model.predict(img, save=False, imgsz=640, conf=0.5, iou=0.3)\n\n# print the results\ninference_time = int(result[0].speed['inference'])\nprint(f\"Inference Time: {inference_time} ms\")\nprint(f'Number of objects: {len (result[0].boxes.cls)}')\n```\n\n![](images/png/yolo-py-script.png)\n\nAnd enter with the commands: `[CTRL+O]`  + `[ENTER]` +` [CTRL+X]` to save the Python script. \n\nRun the script:\n\n```bash\npython yolov8_tests.py\n```\n\nThe result is the same as running the inference at the terminal level (CLI) and with the built-in Python interpreter.\n\n> Calling the YOLO library and loading the model for inference for the first time takes a long time, but the inferences after that will be much faster. For example, the first single inference can take several seconds, but after that, the inference time should be reduced to less than 1 second.\n>\n\n### Training YOLOv8 on a Customized Dataset\n\nReturn to our \"Boxe versus Wheel\" dataset, labeled on [Roboflow](https://universe.roboflow.com/marcelo-rovai-riila/box-versus-wheel-auto-dataset). On the `Download Dataset`, instead of `Download a zip to computer` option done for training on Edge Impulse Studio, we will opt for `Show download code`. This option will open a pop-up window with a code snippet that should be pasted into our training notebook.\n\n![](images/png/dataset_code.png)\n\nFor training, let's adapt one of the public examples available from Ultralitytics and run it on Google Colab. Below, you can find mine to be adapted in your project:\n\n- YOLOv8 Box versus Wheel Dataset Training [[Open In Colab]](https://colab.research.google.com/github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/yolov8_box_vs_wheel.ipynb)\n\n#### Critical points on the Notebook:\n\n1. Run it with GPU (the NVidia T4 is free)\n\n2. Install Ultralytics using PIP.\n\n    ![](images/png/yolo-train-lib.png)\n\n3. Now, you can import the YOLO and upload your dataset to the CoLab, pasting the Download code that we get from Roboflow. Note that our dataset will be mounted under `/content/datasets/`:\n\n![](images/png/yolo-dataset-upload.png)\n\n4. It is essential to verify and change the file `data.yaml` with the correct path for the images (copy the path on each `images` folder).\n\n```bash\nnames:\n- box\n- wheel\nnc: 2\nroboflow:\n  license: CC BY 4.0\n  project: box-versus-wheel-auto-dataset\n  url: https://universe.roboflow.com/marcelo-rovai-riila/box-versus-wheel-auto-dataset/dataset/5\n  version: 5\n  workspace: marcelo-rovai-riila\ntest: /content/datasets/Box-versus-Wheel-auto-dataset-5/test/images\ntrain: /content/datasets/Box-versus-Wheel-auto-dataset-5/train/images\nval: /content/datasets/Box-versus-Wheel-auto-dataset-5/valid/images\n```\n\n5. Define the main hyperparameters that you want to change from default, for example:\n\n    ```bash\n    MODEL = 'yolov8n.pt'\n    IMG_SIZE = 640\n    EPOCHS = 25 # For a final project, you should consider at least 100 epochs \n    ```\n\n6. Run the training (using CLI):\n\n    ```bash\n    !yolo task=detect mode=train model={MODEL} data={dataset.location}/data.yaml epochs={EPOCHS} imgsz={IMG_SIZE} plots=True \n    ```\n\n    ![image-20240910111319804](images/png/train-result.png)\n\n​\tThe model took a few minutes to be trained and has an excellent result (mAP50 of 0.995). At the end of the training, all results are saved in the folder listed, for example: `/runs/detect/train/`. There, you can find, for example, the confusion matrix.\n\n![](images/png/matrix.png)\n\n7. Note that the trained model (`best.pt`) is saved in the folder  `/runs/detect/train/weights/`. Now, you should validate the trained model with the `valid/images`. \n\n```bash\n!yolo task=detect mode=val model={HOME}/runs/detect/train/weights/best.pt data={dataset.location}/data.yaml\n```\n\n​\tThe results were similar to training. \n\n8. Now, we should perform inference on the images left aside for testing\n\n```bash\n!yolo task=detect mode=predict model={HOME}/runs/detect/train/weights/best.pt conf=0.25 source={dataset.location}/test/images save=True\n```\n\nThe inference results are saved in the folder `runs/detect/predict`. Let's see some of them:\n\n![](images/png/test-infer-yolo.png)\n\n9. It is advised to export the train, validation, and test results for a Drive at Google. To do so, we should mount the drive. \n\n    ```python\n    from google.colab import drive\n    drive.mount('/content/gdrive')\n    ```\n\n    and copy the content of `/runs` folder to a folder that you should create in your Drive, for example: \n\n    ```bash\n    !scp -r /content/runs '/content/gdrive/MyDrive/10_UNIFEI/Box_vs_Wheel_Project'\n    ```\n\n    \n\n### Inference with the trained model, using the Raspi\n\nDownload the trained model ` /runs/detect/train/weights/best.pt` to your computer. Using the FileZilla FTP, let's transfer the `best.pt` to the Raspi models folder (before the transfer, you may change the model name, for example, `box_wheel_320_yolo.pt`). \n\nUsing the FileZilla FTP, let's transfer a few images from the test dataset to `.\\YOLO\\images`:\n\nLet's return to the YOLO folder and use the Python Interpreter:\n\n```bash\ncd ..\npython\n```\n\nAs before, we will import the YOLO library and define our converted model to detect bees:\n\n```python\nfrom ultralytics import YOLO\nmodel = YOLO('./models/box_wheel_320_yolo.pt')\n```\n\nNow, let's define an image and call the inference (we will save the image result this time to external verification):\n\n```python\nimg = './images/1_box_1_wheel.jpg'\nresult = model.predict(img, save=True, imgsz=320, conf=0.5, iou=0.3)\n```\n\nLet's repeat for several images. The inference result is saved on the variable `result,` and the processed image on `runs/detect/predict8`\n\n![](images/png/infer-yolo.png)\n\nUsing FileZilla FTP, we can send the inference result to our Desktop for verification: \n\n![](images/png/yolo-infer-raspi.png)\n\nWe can see that the inference result is excellent! The model was trained based on the smaller base model of the YOLOv8 family (YOLOv8n). The issue is the latency, around 1 second (or 1 FPS on the Raspi-Zero). Of course, we can reduce this latency and convert the model to TFLite or NCNN.\n\n## Object Detection on a live stream\n\nAll the models explored in this lab can detect objects in real-time using a camera. The captured image should be the input for the trained and converted model. For the Raspi-4 or 5 with a desktop, OpenCV can capture the frames and display the inference result.\n\nHowever, creating a live stream with a webcam to detect objects in real-time is also possible. For example, let’s start with the script developed for the Image Classification app and adapt it for a *Real-Time Object Detection Web Application Using TensorFlow Lite and Flask*.\n\nThis app version will work for all TFLite models. Verify if the model is in its correct folder, for example:\n\n```python\nmodel_path = \"./models/ssd-mobilenet-v1-tflite-default-v1.tflite\"\n```\n\nDownload the Python script ` object_detection_app.py` from [GitHub](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/python_scripts/object_detection_app.py).\n\nAnd on the terminal, run:\n\n```bash\npython3 object_detection_app.py\n```\n\nAnd access the web interface:\n\n- On the Raspberry Pi itself (if you have a GUI): Open a web browser and go to `http://localhost:5000`\n- From another device on the same network: Open a web browser and go to `http://<raspberry_pi_ip>:5000` (Replace `<raspberry_pi_ip>` with your Raspberry Pi's IP address). For example: `http://192.168.4.210:5000/`\n\nHere are some screenshots of the app running on an external desktop\n\n![](images/png/app-running.png)\n\nLet's see a technical description of the key modules used in the object detection application:\n\n1. **TensorFlow Lite (tflite_runtime)**:\n    - Purpose: Efficient inference of machine learning models on edge devices.\n    - Why: TFLite offers reduced model size and optimized performance compared to full TensorFlow, which is crucial for resource-constrained devices like Raspberry Pi. It supports hardware acceleration and quantization, further improving efficiency.\n    - Key functions: `Interpreter` for loading and running the model,` get_input_details(),` and `get_output_details()` for interfacing with the model.\n2. **Flask:**\n    - Purpose: Lightweight web framework for creating the backend server.\n    - Why: Flask's simplicity and flexibility make it ideal for rapidly developing and deploying web applications. It's less resource-intensive than larger frameworks suitable for edge devices.\n    - Key components: route decorators for defining API endpoints, `Response` objects for streaming video, `render_template_string` for serving dynamic HTML.\n3. **Picamera2:**\n    - Purpose: Interface with the Raspberry Pi camera module.\n    - Why: Picamera2 is the latest library for controlling Raspberry Pi cameras, offering improved performance and features over the original Picamera library.\n    - Key functions: `create_preview_configuration()` for setting up the camera, `capture_file()` for capturing frames.\n4. **PIL (Python Imaging Library):**\n    - Purpose: Image processing and manipulation.\n    - Why: PIL provides a wide range of image processing capabilities. It’s used here to resize images, draw bounding boxes, and convert between image formats.\n    - Key classes: `Image` for loading and manipulating images, `ImageDraw` for drawing shapes and text on images.\n5. **NumPy:**\n    - Purpose: Efficient array operations and numerical computing.\n    - Why: NumPy’s array operations are much faster than pure Python lists, which is crucial for efficiently processing image data and model inputs/outputs.\n    - Key functions: `array()` for creating arrays, `expand_dims()` for adding dimensions to arrays.\n6. **Threading:**\n    - Purpose: Concurrent execution of tasks.\n    - Why: Threading allows simultaneous frame capture, object detection, and web server operation, crucial for maintaining real-time performance.\n    - Key components: `Thread` class creates separate execution threads, and Lock is used for thread synchronization.\n7. **io.BytesIO:**\n    - Purpose: In-memory binary streams.\n    - Why: Allows efficient handling of image data in memory without needing temporary files, improving speed and reducing I/O operations.\n8. **time:**\n    - Purpose: Time-related functions.\n    - Why: Used for adding delays (`time.sleep()`) to control frame rate and for performance measurements.\n9. **jQuery (client-side)**:\n    - Purpose: Simplified DOM manipulation and AJAX requests.\n    - Why: It makes it easy to update the web interface dynamically and communicate with the server without page reloads.\n    - Key functions: `.get()` and `.post()` for AJAX requests, DOM manipulation methods for updating the UI.\n\nRegarding the main app system architecture:\n\n1. **Main Thread**: Runs the Flask server, handling HTTP requests and serving the web interface.\n2. **Camera Thread**: Continuously captures frames from the camera.\n3. **Detection Thread**: Processes frames through the TFLite model for object detection.\n4. **Frame Buffer**: Shared memory space (protected by locks) storing the latest frame and detection results.\n\nAnd the app data flow, we can describe in short:\n\n1. Camera captures frame → Frame Buffer\n2. Detection thread reads from Frame Buffer → Processes through TFLite model → Updates detection results in Frame Buffer\n3. Flask routes access Frame Buffer to serve the latest frame and detection results\n4. Web client receives updates via AJAX and updates UI\n\nThis architecture allows for efficient, real-time object detection while maintaining a responsive web interface running on a resource-constrained edge device like a Raspberry Pi. Threading and efficient libraries like TFLite and PIL enable the system to process video frames in real-time, while Flask and jQuery provide a user-friendly way to interact with them.\n\nYou can test the app with another pre-processed model, such as the EfficientDet, changing the app line:\n\n```python\nmodel_path = \"./models/lite-model_efficientdet_lite0_detection_metadata_1.tflite\"\n```\n\n> If we want to use the app for the SSD-MobileNetV2 model, trained on Edge Impulse Studio with the \"Box versus Wheel\" dataset, the code should also be adapted depending on the input details, as we have explored on its [notebook](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/EI-SSD-MobileNetV2.ipynb). \n\n## Conclusion\n\nThis lab has explored the implementation of object detection on edge devices like the Raspberry Pi, demonstrating the power and potential of running advanced computer vision tasks on resource-constrained hardware. We've covered several vital aspects:\n\n1. **Model Comparison**: We examined different object detection models, including SSD-MobileNet, EfficientDet, FOMO, and YOLO, comparing their performance and trade-offs on edge devices.\n\n2. **Training and Deployment**: Using a custom dataset of boxes and wheels (labeled on Roboflow), we walked through the process of training models using Edge Impulse Studio and Ultralytics and deploying them on Raspberry Pi.\n\n3. **Optimization Techniques**: To improve inference speed on edge devices, we explored various optimization methods, such as model quantization (TFLite int8) and format conversion (e.g., to NCNN).\n\n4. **Real-time Applications**: The lab exemplified a real-time object detection web application, demonstrating how these models can be integrated into practical, interactive systems.\n\n5. **Performance Considerations**: Throughout the lab, we discussed the balance between model accuracy and inference speed, a critical consideration for edge AI applications.\n\nThe ability to perform object detection on edge devices opens up numerous possibilities across various domains, from precision agriculture, industrial automation, and quality control to smart home applications and environmental monitoring. By processing data locally, these systems can offer reduced latency, improved privacy, and operation in environments with limited connectivity.\n\nLooking ahead, potential areas for further exploration include:\n- Implementing multi-model pipelines for more complex tasks\n- Exploring hardware acceleration options for Raspberry Pi\n- Integrating object detection with other sensors for more comprehensive edge AI systems\n- Developing edge-to-cloud solutions that leverage both local processing and cloud resources\n\nObject detection on edge devices can create intelligent, responsive systems that bring the power of AI directly into the physical world, opening up new frontiers in how we interact with and understand our environment.\n\n## Resources\n\n- [Dataset (\"Box versus Wheel\")](https://universe.roboflow.com/marcelo-rovai-riila/box-versus-wheel-auto-dataset)\n\n- [SSD-MobileNet Notebook on a Raspi](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/SSD_MobileNetV1.ipynb)\n\n- [EfficientDet Notebook on a Raspi](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/SSD_EfficientDet.ipynb)\n\n- [FOMO - EI Linux Notebook on a Raspi](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/EI-Linux-FOMO.ipynb)\n\n- [YOLOv8 Box versus Wheel Dataset Training on CoLab](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/blob/main/OBJ_DETEC/notebooks/yolov8_box_vs_wheel.ipynb)\n\n- [Edge Impulse Project - SSD MobileNet and FOMO ](https://studio.edgeimpulse.com/public/515477/live)\n\n- [Python Scripts](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/tree/main/OBJ_DETEC/python_scripts)\n\n- [Models](https://github.com/Mjrovai/EdgeML-with-Raspberry-Pi/tree/main/OBJ_DETEC/models)\n\n    \n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":6,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../../../custom_callout.lua"],"reference-location":"margin","highlight-style":"github","toc":true,"toc-depth":4,"include-in-header":{"text":"<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-M21L0CBCVN\"></script>\n<script type=\"module\"  src=\"/scripts/ai_menu/dist/bundle.js\" defer></script>\n"},"citeproc":true,"output-file":"object_detection.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author, Editor & Curator","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Last Updated","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.33","bibliography":["../../../../contents/core/introduction/introduction.bib","../../../../contents/core/ai_for_good/ai_for_good.bib","../../../../contents/core/benchmarking/benchmarking.bib","../../../../contents/core/data_engineering/data_engineering.bib","../../../../contents/core/dl_primer/dl_primer.bib","../../../../contents/core/efficient_ai/efficient_ai.bib","../../../../contents/core/ml_systems/ml_systems.bib","../../../../contents/core/frameworks/frameworks.bib","../../../../contents/core/generative_ai/generative_ai.bib","../../../../contents/core/hw_acceleration/hw_acceleration.bib","../../../../contents/core/ondevice_learning/ondevice_learning.bib","../../../../contents/core/ops/ops.bib","../../../../contents/core/optimizations/optimizations.bib","../../../../contents/core/privacy_security/privacy_security.bib","../../../../contents/core/responsible_ai/responsible_ai.bib","../../../../contents/core/robust_ai/robust_ai.bib","../../../../contents/core/sustainable_ai/sustainable_ai.bib","../../../../contents/core/training/training.bib","../../../../contents/core/workflow/workflow.bib","../../../../contents/core/conclusion/conclusion.bib"],"comments":{"giscus":{"repo":"harvard-edge/cs249r_book"}},"crossref":{"appendix-title":"Appendix","appendix-delim":":","custom":[{"kind":"float","reference-prefix":"Lab","key":"labq","latex-env":"lab"},{"kind":"float","reference-prefix":"Exercise","key":"exr","latex-env":"exr"},{"kind":"float","reference-prefix":"Video","key":"vid","latex-env":"vid"}]},"citation":true,"license":"CC-BY-NC-SA","editor":{"render-on-save":true},"resources":["../../../../CNAME"],"_quarto-vars":{"email":{"contact":"vj@eecs.harvard.edu","subject":["MLSys Book"],"info":"mailto:vj@eecs.harvard.edu?subject=\"CS249r%20MLSys%20with%20TinyML%20Book%20-%20\""},"title":{"long":"Machine Learning Systems","short":"Machine Learning Systems"}},"lightbox":true,"theme":{"light":["default","../../../../style.scss","../../../../style-light.scss"],"dark":["darkly","../../../../style.scss","../../../../style-dark.scss"]},"code-block-bg":true,"code-block-border-left":"#A51C30","table":{"classes":["table-striped","table-hover"]},"citation-location":"margin","sidenote":true,"linkcolor":"#A51C30","urlcolor":"#A51C30","anchor-sections":true,"smooth-scroll":false,"citations-hover":false,"footnotes-hover":false,"number-depth":3},"extensions":{"book":{"multiFile":true}}},"titlepage-pdf":{"identifier":{"display-name":"PDF","target-format":"titlepage-pdf","base-format":"pdf","extension-name":"titlepage"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":["../../../../_extensions/nmfs-opensci/titlepage/fonts/qualitype/opentype/QTDublinIrish.otf"],"shortcodes":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","filters":["C:\\Users\\kkleinbard\\Documents\\dev\\kai_projects\\tinyml\\tinyML_repo\\dev_10_26\\cs249r_book\\_extensions\\nmfs-opensci\\titlepage\\titlepage-theme.lua","C:\\Users\\kkleinbard\\Documents\\dev\\kai_projects\\tinyml\\tinyML_repo\\dev_10_26\\cs249r_book\\_extensions\\nmfs-opensci\\titlepage\\coverpage-theme.lua","../../../../custom_callout.lua"],"toc":true,"top-level-division":"chapter","number-sections":true,"toc-depth":3,"cite-method":"citeproc","reference-location":"margin","include-in-header":[{"file":"../../../../tex/header-includes.tex"}],"output-file":"object_detection.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"template-partials":["../../../../_extensions/nmfs-opensci/titlepage/_coverpage.tex","../../../../_extensions/nmfs-opensci/titlepage/_author-affiliation-themes.tex","../../../../_extensions/nmfs-opensci/titlepage/_header-footer-date-themes.tex","../../../../_extensions/nmfs-opensci/titlepage/_title-themes.tex","../../../../_extensions/nmfs-opensci/titlepage/_titlepage.tex","../../../../_extensions/nmfs-opensci/titlepage/before-body.tex","../../../../_extensions/nmfs-opensci/titlepage/pandoc.tex"],"revealjs-plugins":[],"bibliography":["../../../../contents/core/introduction/introduction.bib","../../../../contents/core/ai_for_good/ai_for_good.bib","../../../../contents/core/benchmarking/benchmarking.bib","../../../../contents/core/data_engineering/data_engineering.bib","../../../../contents/core/dl_primer/dl_primer.bib","../../../../contents/core/efficient_ai/efficient_ai.bib","../../../../contents/core/ml_systems/ml_systems.bib","../../../../contents/core/frameworks/frameworks.bib","../../../../contents/core/generative_ai/generative_ai.bib","../../../../contents/core/hw_acceleration/hw_acceleration.bib","../../../../contents/core/ondevice_learning/ondevice_learning.bib","../../../../contents/core/ops/ops.bib","../../../../contents/core/optimizations/optimizations.bib","../../../../contents/core/privacy_security/privacy_security.bib","../../../../contents/core/responsible_ai/responsible_ai.bib","../../../../contents/core/robust_ai/robust_ai.bib","../../../../contents/core/sustainable_ai/sustainable_ai.bib","../../../../contents/core/training/training.bib","../../../../contents/core/workflow/workflow.bib","../../../../contents/core/conclusion/conclusion.bib"],"comments":{"giscus":{"repo":"harvard-edge/cs249r_book"}},"crossref":{"appendix-title":"Appendix","appendix-delim":":","custom":[{"kind":"float","reference-prefix":"Lab","key":"labq","latex-env":"lab"},{"kind":"float","reference-prefix":"Exercise","key":"exr","latex-env":"exr"},{"kind":"float","reference-prefix":"Video","key":"vid","latex-env":"vid"}]},"citation":true,"license":"CC-BY-NC-SA","editor":{"render-on-save":true},"resources":["../../../../CNAME"],"_quarto-vars":{"email":{"contact":"vj@eecs.harvard.edu","subject":["MLSys Book"],"info":"mailto:vj@eecs.harvard.edu?subject=\"CS249r%20MLSys%20with%20TinyML%20Book%20-%20\""},"title":{"long":"Machine Learning Systems","short":"Machine Learning Systems"}},"documentclass":"scrbook","classoption":["abstract","titlepage"],"coverpage":true,"coverpage-title":"Machine Learning Systems","coverpage-bg-image":"../../../../cover-image-transparent.png","coverpage-author":["Vijay","Janapa Reddi"],"coverpage-theme":{"page-text-align":"center","bg-image-left":"0.225\\paperwidth","bg-image-bottom":7,"bg-image-rotate":0,"bg-image-opacity":1,"author-style":"plain","author-sep":"newline","author-fontsize":20,"author-align":"right","author-bottom":"0.15\\paperwidth","author-left":"7in","author-width":"6in","footer-style":"none","header-style":"none","date-style":"none","title-fontsize":57,"title-left":"0.075\\paperwidth","title-bottom":"0.375\\paperwidth","title-width":"0.9\\paperwidth"},"titlepage":true,"titlepage-theme":{"elements":["\\titleblock","Prof. Vijay Janapa Reddi","School of Engineering and Applied Sciences","Harvard University","\\vfill","With heartfelt gratitude to the community for their invaluable contributions and steadfast support.","\\vfill"],"page-align":"left","title-style":"plain","title-fontstyle":["huge","bfseries"],"title-space-after":"4\\baselineskip","title-subtitle-space-between":"0.05\\textheight","subtitle-fontstyle":["large","textit"],"author-style":"superscript-with-and","author-fontstyle":"large","affiliation-style":"numbered-list-with-correspondence","affiliation-fontstyle":"large","affiliation-space-after":"0pt","footer-style":"plain","footer-fontstyle":"large","logo-size":"0.15\\textheight","logo-space-after":"1\\baselineskip","vrule-width":"2pt","vrule-align":"left","vrule-color":"black"},"lof":false,"lot":false,"latex-engine":"xelatex","citation-package":"natbib","link-citations":true,"biblio-title":"References","title-block-style":"none","indent":"0px","fontsize":"10pt","citation-location":"block","fig-caption":true,"cap-location":"margin","fig-cap-location":"margin","tbl-cap-location":"margin","hyperrefoptions":["linktoc=all","pdfwindowui","pdfpagemode=FullScreen","pdfpagelayout=TwoPageRight"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","titlepage-pdf"]}